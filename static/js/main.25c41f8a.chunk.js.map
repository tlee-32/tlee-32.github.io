{"version":3,"sources":["logo.svg","Title.js","ChatInput.js","ChatBox.js","App.js","reportWebVitals.js","index.js"],"names":["Title","ChatInput","props","useState","text","setText","onChange","event","message","target","value","onClick","sendMessage","ChatBox","messages","map","style","color","App","setMessages","newMsg","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+MAAe,I,MCGAA,MAHf,WACE,OAAO,mDCsBMC,MArBf,SAAmBC,GAAQ,IAAD,EACAC,mBAAS,IADT,mBACjBC,EADiB,KACXC,EADW,KAaxB,OACE,gCAEE,uBAAOC,SAbgB,SAACC,GAC1B,IAAMC,EAAUD,EAAME,OAAOC,MAC7BL,EAAQG,MAYN,wBAAQG,QATZ,WACET,EAAMU,YAAYR,IAQhB,sBCFSS,MAjBf,SAAiBX,GACf,OACE,8BACGA,EAAMY,SAASC,KAAI,SAACP,GACnB,OACE,qBACEQ,MAAO,CACLC,MAAO,QAFX,SAKGT,UCaEU,MAhBf,WAAgB,IAAD,EACmBf,mBAAS,CAAC,UAD7B,mBACNW,EADM,KACIK,EADJ,KAOb,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAWP,YAPK,SAACQ,GACnBD,EAAW,sBAAML,GAAN,CAAgBM,MAMzB,eACA,cAAC,EAAD,CAASN,SAAUA,EAAnB,mBCNSO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.25c41f8a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","function Title() {\r\n  return <h1>Chat Application</h1>;\r\n}\r\nexport default Title;\r\n","import { useState } from \"react\";\r\n\r\nfunction ChatInput(props) {\r\n  const [text, setText] = useState(\"\"); // [value, updater]\r\n\r\n  const updateMessageValue = (event) => {\r\n    const message = event.target.value;\r\n    setText(message);\r\n  };\r\n\r\n  function onClick() {\r\n    props.sendMessage(text)\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n\r\n      <input onChange={updateMessageValue}/>\r\n      <button onClick={onClick}>Send</button>\r\n    </div>\r\n  );\r\n}\r\nexport default ChatInput;\r\n","function ChatBox(props) {\r\n  return (\r\n    <div>\r\n      {props.messages.map((message) => {\r\n        return (\r\n          <div\r\n            style={{\r\n              color: \"blue\",\r\n            }}\r\n          >\r\n            {message}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\nexport default ChatBox;\r\n","import {useState} from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Title from \"./Title\";\nimport ChatInput from \"./ChatInput\";\nimport ChatBox from \"./ChatBox\";\n\nfunction App() {\n  const [messages, setMessages] = useState([\"Hello\"]);\n\n  const sendMessage = (newMsg) => {\n    setMessages ([...messages, newMsg]);\n  }\n\n  return (\n    <div>\n      <Title></Title>\n      <ChatInput sendMessage={sendMessage}> </ChatInput>\n      <ChatBox messages={messages}> </ChatBox>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}